{"ast":null,"code":"import axios from 'axios';\n\n//const API_URL = 'http://127.0.0.1:8000'; // Change to your API endpoint\nconst API_URL = process.env.REACT_APP_API_URL;\nconst register = (username, email, password) => {\n  return axios.post(API_URL + '/register', {\n    username,\n    email,\n    password\n  });\n};\nconst login = (email, password) => {\n  return axios.post(API_URL + '/login', {\n    email,\n    password\n  }, {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }).then(response => {\n    if (response.data.token) {\n      localStorage.setItem('user', JSON.stringify(response.data));\n      return response.data; // Successful login\n    } else {\n      // If no token, login is unsuccessful (server didn't provide token)\n      throw new Error('Invalid login credentials.');\n    }\n  });\n};\nconst logout = () => {\n  localStorage.removeItem('user');\n};\nconst getCurrentUser = () => {\n  const userStr = localStorage.getItem('user');\n  if (userStr) return JSON.parse(userStr);\n  return null;\n};\nexport default {\n  register,\n  login,\n  logout,\n  getCurrentUser\n};","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","register","username","email","password","post","login","headers","then","response","data","token","localStorage","setItem","JSON","stringify","Error","logout","removeItem","getCurrentUser","userStr","getItem","parse"],"sources":["D:/practical/src/services/AuthService.ts"],"sourcesContent":["import axios from 'axios';\n\n\n\n//const API_URL = 'http://127.0.0.1:8000'; // Change to your API endpoint\nconst API_URL = process.env.REACT_APP_API_URL;\nconst register = (username: string, email: string, password: string) => {\n  return axios.post(API_URL + '/register', {\n    username,\n    email,\n    password\n  });\n};\n\nconst login = (email: string, password: string) => {\n  return axios.post(API_URL + '/login', {\n    email,\n    password\n  },{ headers: {\n    'Content-Type': 'application/json'\n}}).then(response => {\n  if (response.data.token) {\n    localStorage.setItem('user', JSON.stringify(response.data));\n    return response.data; // Successful login\n  } else {\n    // If no token, login is unsuccessful (server didn't provide token)\n    throw new Error('Invalid login credentials.');\n  }\n  });\n};\n\nconst logout = () => {\n  localStorage.removeItem('user');\n};\n\nconst getCurrentUser = () => {\n  const userStr = localStorage.getItem('user');\n  if (userStr) return JSON.parse(userStr);\n  return null;\n};\n\nexport default {\n  register,\n  login,\n  logout,\n  getCurrentUser\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAIzB;AACA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB;AAC7C,MAAMC,QAAQ,GAAGA,CAACC,QAAgB,EAAEC,KAAa,EAAEC,QAAgB,KAAK;EACtE,OAAOR,KAAK,CAACS,IAAI,CAACR,OAAO,GAAG,WAAW,EAAE;IACvCK,QAAQ;IACRC,KAAK;IACLC;EACF,CAAC,CAAC;AACJ,CAAC;AAED,MAAME,KAAK,GAAGA,CAACH,KAAa,EAAEC,QAAgB,KAAK;EACjD,OAAOR,KAAK,CAACS,IAAI,CAACR,OAAO,GAAG,QAAQ,EAAE;IACpCM,KAAK;IACLC;EACF,CAAC,EAAC;IAAEG,OAAO,EAAE;MACX,cAAc,EAAE;IACpB;EAAC,CAAC,CAAC,CAACC,IAAI,CAACC,QAAQ,IAAI;IACnB,IAAIA,QAAQ,CAACC,IAAI,CAACC,KAAK,EAAE;MACvBC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACN,QAAQ,CAACC,IAAI,CAAC,CAAC;MAC3D,OAAOD,QAAQ,CAACC,IAAI,CAAC,CAAC;IACxB,CAAC,MAAM;MACL;MACA,MAAM,IAAIM,KAAK,CAAC,4BAA4B,CAAC;IAC/C;EACA,CAAC,CAAC;AACJ,CAAC;AAED,MAAMC,MAAM,GAAGA,CAAA,KAAM;EACnBL,YAAY,CAACM,UAAU,CAAC,MAAM,CAAC;AACjC,CAAC;AAED,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAC3B,MAAMC,OAAO,GAAGR,YAAY,CAACS,OAAO,CAAC,MAAM,CAAC;EAC5C,IAAID,OAAO,EAAE,OAAON,IAAI,CAACQ,KAAK,CAACF,OAAO,CAAC;EACvC,OAAO,IAAI;AACb,CAAC;AAED,eAAe;EACbnB,QAAQ;EACRK,KAAK;EACLW,MAAM;EACNE;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}