{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hemang\\\\Desktop\\\\practical\\\\src\\\\components\\\\pageComponents\\\\ResidentsItems\\\\ResidentsItems.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\n// Import your types\nimport ResidentsItemList from \"./components/ResidentsItemlist\"; // Ensure correct import\nimport useGetResidentsItemService from \"./hooks/useGetResidentsItemService\";\nimport { ResidentsItemToolBar } from \"./components/ResidentsItemToolBar\";\nimport { AddEditResidentsItemForm } from \"./components/AddEditResidentsItemForm\";\nimport { ImportResidentsItemForm } from \"./components/ImportResidentsItemForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ResidentsItems = () => {\n  _s();\n  const {\n    setValue,\n    reset\n  } = useForm();\n  const [residentsData, setResidentsData] = useState([]); // Renamed to avoid conflict with the type name\n  const [showModal, setShowModal] = useState(false);\n  const [editMode, setEditMode] = useState(false);\n  const [currentResidents, setCurrentResidents] = useState(null); // Renamed to 'setCurrentResidents'\n  const [showCsvModal, setShowCsvModal] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const {\n    getResidents,\n    deleteResidents\n  } = useGetResidentsItemService();\n\n  // Fetch data dynamically when the component mounts\n  useEffect(() => {\n    fetchResidentsData();\n  }, []);\n\n  // Fetch items data from the backend\n  // const fetchResidentsData = async () => {\n  //   setLoading(true); // Show loading state\n  //   try {\n  //     const response = await getResidents(); // Adjust based on your service\n\n  //     const items = response.data || response;\n  //     console.log(items);\n  //     const formattedItems = items.map((item: any) => ({\n  //       id: item.id,\n  //       name: item.name,\n  //       category: item.category,\n  //       iddsi_level: item.iddsi_level,\n  //     }));\n  //     setResidentsData(formattedItems);\n  //   } catch (error) {\n  //     console.error(\"Error fetching Residents data:\", error);\n  //   } finally {\n  //     setLoading(false); // Hide loading state\n  //   }\n  // };\n\n  const fetchResidentsData = async () => {\n    setLoading(true); // Show loading state\n    try {\n      var _response$data;\n      const response = await getResidents(); // Adjust based on your service\n      // Directly access the `data` property to avoid issues\n      const items = (response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.data) || [];\n      console.log(items);\n\n      // Ensure that the items array is properly mapped\n      const formattedItems = items.map(item => ({\n        id: item.id || '',\n        name: item.name || '',\n        category: item.category || '',\n        iddsi_level: item.iddsi_level || ''\n      }));\n      setResidentsData(formattedItems);\n    } catch (error) {\n      console.error(\"Error fetching Residents data:\", error);\n    } finally {\n      setLoading(false); // Hide loading state\n    }\n  };\n\n  // Handle opening the form modal\n  const handleShow = () => {\n    setShowModal(true);\n    setEditMode(false);\n    reset(); // Clear form fields when adding a new item\n  };\n\n  // Handle closing the modals (both CSV and form modals)\n  const handleClose = () => {\n    setShowModal(false);\n    setShowCsvModal(false);\n    setCurrentResidents(null); // Reset current item after closing\n  };\n\n  // Handle item edit\n  const handleEdit = item => {\n    setEditMode(true);\n    setCurrentResidents(item);\n    setShowModal(true);\n    // Populate the form with the selected item data\n    setValue(\"name\", item.name);\n    setValue(\"category\", item.category);\n    setValue(\"iddsi_level\", item.iddsi_level);\n  };\n\n  // Handle delete item\n  const handleDelete = async data => {\n    const id = data === null || data === void 0 ? void 0 : data.id;\n    try {\n      await deleteResidents(id);\n      setResidentsData(prevItems => prevItems.filter(item => item.id !== id)); // Update state after deletion\n      alert(`Item with ID ${id} deleted successfully.`);\n    } catch (error) {\n      console.error(`Error deleting item with ID ${id}:`, error);\n      alert(`Error deleting item with ID ${id}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-5\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row justify-content-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-12\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-center\",\n          children: \"Residents Items\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ResidentsItemToolBar, {\n          handleShow: handleShow,\n          setShowCsvModal: setShowCsvModal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this), showModal && /*#__PURE__*/_jsxDEV(AddEditResidentsItemForm, {\n          editMode: editMode,\n          handleClose: handleClose,\n          currenResidents: currentResidents // Ensure type is passed correctly\n          ,\n          setResidentsData: setResidentsData,\n          ResidentsData: residentsData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }, this), showCsvModal && /*#__PURE__*/_jsxDEV(ImportResidentsItemForm, {\n          handleClose: handleClose,\n          fetchResidentsData: fetchResidentsData,\n          residentsData: residentsData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ResidentsItemList, {\n          ResidentsData: residentsData,\n          handleEdit: handleEdit,\n          handleDelete: handleDelete\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Loading items...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 23\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n};\n_s(ResidentsItems, \"uK/baNufF5CG7yXHuMKYJARdorQ=\", false, function () {\n  return [useForm, useGetResidentsItemService];\n});\n_c = ResidentsItems;\nexport default ResidentsItems;\nvar _c;\n$RefreshReg$(_c, \"ResidentsItems\");","map":{"version":3,"names":["React","useState","useEffect","useForm","ResidentsItemList","useGetResidentsItemService","ResidentsItemToolBar","AddEditResidentsItemForm","ImportResidentsItemForm","jsxDEV","_jsxDEV","ResidentsItems","_s","setValue","reset","residentsData","setResidentsData","showModal","setShowModal","editMode","setEditMode","currentResidents","setCurrentResidents","showCsvModal","setShowCsvModal","loading","setLoading","getResidents","deleteResidents","fetchResidentsData","_response$data","response","items","data","console","log","formattedItems","map","item","id","name","category","iddsi_level","error","handleShow","handleClose","handleEdit","handleDelete","prevItems","filter","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","currenResidents","ResidentsData","_c","$RefreshReg$"],"sources":["C:/Users/Hemang/Desktop/practical/src/components/pageComponents/ResidentsItems/ResidentsItems.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { ResidentsData, ResidentsForm } from \"../../../types/ResidentsForm\"; // Import your types\r\nimport ResidentsItemList from \"./components/ResidentsItemlist\"; // Ensure correct import\r\nimport useGetResidentsItemService from \"./hooks/useGetResidentsItemService\";\r\nimport { ResidentsItemToolBar } from \"./components/ResidentsItemToolBar\";\r\nimport { AddEditResidentsItemForm } from \"./components/AddEditResidentsItemForm\";\r\nimport { ImportResidentsItemForm } from \"./components/ImportResidentsItemForm\";\r\n\r\nconst ResidentsItems: React.FC = () => {\r\n  const { setValue, reset } = useForm<ResidentsForm>();\r\n  const [residentsData, setResidentsData] = useState<ResidentsData[]>([]); // Renamed to avoid conflict with the type name\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [currentResidents, setCurrentResidents] = useState<ResidentsData | null>(null); // Renamed to 'setCurrentResidents'\r\n  const [showCsvModal, setShowCsvModal] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const { getResidents, deleteResidents } = useGetResidentsItemService();\r\n\r\n  // Fetch data dynamically when the component mounts\r\n  useEffect(() => {\r\n    fetchResidentsData();\r\n  }, []);\r\n\r\n  // Fetch items data from the backend\r\n  // const fetchResidentsData = async () => {\r\n  //   setLoading(true); // Show loading state\r\n  //   try {\r\n  //     const response = await getResidents(); // Adjust based on your service\r\n\r\n  //     const items = response.data || response;\r\n  //     console.log(items);\r\n  //     const formattedItems = items.map((item: any) => ({\r\n  //       id: item.id,\r\n  //       name: item.name,\r\n  //       category: item.category,\r\n  //       iddsi_level: item.iddsi_level,\r\n  //     }));\r\n  //     setResidentsData(formattedItems);\r\n  //   } catch (error) {\r\n  //     console.error(\"Error fetching Residents data:\", error);\r\n  //   } finally {\r\n  //     setLoading(false); // Hide loading state\r\n  //   }\r\n  // };\r\n\r\n  const fetchResidentsData = async () => {\r\n  setLoading(true); // Show loading state\r\n  try {\r\n    const response = await getResidents(); // Adjust based on your service\r\n    // Directly access the `data` property to avoid issues\r\n    const items = response?.data?.data || [];\r\n    console.log(items);\r\n    \r\n    // Ensure that the items array is properly mapped\r\n    const formattedItems = items.map((item: any) => ({\r\n      id: item.id || '',\r\n      name: item.name || '',\r\n      category: item.category || '',\r\n      iddsi_level: item.iddsi_level || '',\r\n    }));\r\n    setResidentsData(formattedItems);\r\n  } catch (error) {\r\n    console.error(\"Error fetching Residents data:\", error);\r\n  } finally {\r\n    setLoading(false); // Hide loading state\r\n  }\r\n};\r\n\r\n  // Handle opening the form modal\r\n  const handleShow = () => {\r\n    setShowModal(true);\r\n    setEditMode(false);\r\n    reset(); // Clear form fields when adding a new item\r\n  };\r\n\r\n  // Handle closing the modals (both CSV and form modals)\r\n  const handleClose = () => {\r\n    setShowModal(false);\r\n    setShowCsvModal(false);\r\n    setCurrentResidents(null); // Reset current item after closing\r\n  };\r\n\r\n  // Handle item edit\r\n  const handleEdit = (item: ResidentsData) => {\r\n    setEditMode(true);\r\n    setCurrentResidents(item);\r\n    setShowModal(true);\r\n    // Populate the form with the selected item data\r\n    setValue(\"name\", item.name);\r\n    setValue(\"category\", item.category);\r\n    setValue(\"iddsi_level\", item.iddsi_level);\r\n  };\r\n\r\n  // Handle delete item\r\n  const handleDelete = async (data: ResidentsData) => {\r\n    const id = data?.id;\r\n\r\n    try {\r\n      await deleteResidents(id);\r\n      setResidentsData((prevItems) => prevItems.filter((item) => item.id !== id)); // Update state after deletion\r\n      alert(`Item with ID ${id} deleted successfully.`);\r\n    } catch (error) {\r\n      console.error(`Error deleting item with ID ${id}:`, error);\r\n      alert(`Error deleting item with ID ${id}`);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mt-5\">\r\n      <div className=\"row justify-content-center\">\r\n        <div className=\"col-md-12\">\r\n          <h2 className=\"text-center\">Residents Items</h2>\r\n\r\n          {/* Toolbar for adding new items and importing CSV */}\r\n          <ResidentsItemToolBar\r\n            handleShow={handleShow}\r\n            setShowCsvModal={setShowCsvModal}\r\n          />\r\n\r\n          {/* Modal for Add/Edit Item */}\r\n          {showModal && (\r\n            <AddEditResidentsItemForm\r\n              editMode={editMode}\r\n              handleClose={handleClose}\r\n              currenResidents={currentResidents as ResidentsData} // Ensure type is passed correctly\r\n              setResidentsData={setResidentsData}\r\n              ResidentsData={residentsData}\r\n            />\r\n          )}\r\n\r\n          {/* CSV Upload Modal */}\r\n          {showCsvModal && (\r\n            <ImportResidentsItemForm\r\n              handleClose={handleClose}\r\n              fetchResidentsData={fetchResidentsData}\r\n              residentsData={residentsData}\r\n            />\r\n          )}\r\n\r\n          {/* Display the list of items */}\r\n          <ResidentsItemList\r\n            ResidentsData={residentsData}\r\n            handleEdit={handleEdit}\r\n            handleDelete={handleDelete}\r\n          />\r\n\r\n          {/* Show loading state if data is being fetched */}\r\n          {loading && <div>Loading items...</div>}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ResidentsItems;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}