{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport ItemService from '../../services/ItemService'; // Importing ItemService\n// import Commonservice from '../common/Commonservice'; // Remove this if not used\nimport Papa from 'papaparse';\n// Import Types\n\nconst Items = () => {\n  _s();\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    formState: {\n      errors\n    }\n  } = useForm();\n  const [itemsData, setItemsData] = useState([]);\n  const [showModal, setShowModal] = useState(false);\n  const [editMode, setEditMode] = useState(false);\n  const [currentItem, setCurrentItem] = useState(null);\n  const [showCsvModal, setShowCsvModal] = useState(false);\n\n  // Fetch data dynamically when component mounts\n  useEffect(() => {\n    fetchItemsData();\n  }, []);\n  const fetchItemsData = async () => {\n    try {\n      const response = await ItemService.getItems(); // Using ItemService instead\n      const items = response.data || response;\n      const formattedItems = items.map(item => ({\n        id: item.id,\n        name: item.name,\n        category: item.category,\n        iddsi_level: item.iddsi_level\n      }));\n      setItemsData(formattedItems);\n    } catch (error) {\n      console.error('Error fetching items data:', error);\n    }\n  };\n  const handleCsvUpload = async event => {\n    var _event$target$files;\n    const file = (_event$target$files = event.target.files) === null || _event$target$files === void 0 ? void 0 : _event$target$files[0];\n    if (file) {\n      Papa.parse(file, {\n        complete: async function (results) {\n          const data = results.data;\n          const parsedItems = data.slice(1).map((row, index) => ({\n            id: itemsData.length + index + 1,\n            name: row[0],\n            category: row[1],\n            iddsi_level: row[2]\n          }));\n          for (const item of parsedItems) {\n            try {\n              await ItemService.setItems(item.name, item.category, item.iddsi_level); // Use ItemService\n            } catch (error) {\n              console.error('Error uploading item:', item, error);\n            }\n          }\n          fetchItemsData();\n          alert(\"Items uploaded and saved successfully!\");\n        },\n        header: false\n      });\n    }\n    setShowCsvModal(false);\n  };\n\n  // Other logic...\n};\n_s(Items, \"jM50q0IS7Aq6zFNMTSzWbAMwqIo=\", false, function () {\n  return [useForm];\n});\n_c = Items;\nexport default Items;\nvar _c;\n$RefreshReg$(_c, \"Items\");","map":{"version":3,"names":["useState","useEffect","useForm","ItemService","Papa","Items","_s","register","handleSubmit","setValue","formState","errors","itemsData","setItemsData","showModal","setShowModal","editMode","setEditMode","currentItem","setCurrentItem","showCsvModal","setShowCsvModal","fetchItemsData","response","getItems","items","data","formattedItems","map","item","id","name","category","iddsi_level","error","console","handleCsvUpload","event","_event$target$files","file","target","files","parse","complete","results","parsedItems","slice","row","index","length","setItems","alert","header","_c","$RefreshReg$"],"sources":["D:/practical/src/components/pages/Items.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport DataTable from 'react-data-table-component';\nimport { useForm } from 'react-hook-form';\nimport ItemService from '../../services/ItemService';  // Importing ItemService\n// import Commonservice from '../common/Commonservice'; // Remove this if not used\nimport Papa from 'papaparse';\nimport { ItemData, ItemsForm } from '../../types/ItemsForm';  // Import Types\n\nconst Items: React.FC = () => {\n  const { register, handleSubmit, setValue, formState: { errors } } = useForm<ItemsForm>();\n  const [itemsData, setItemsData] = useState<ItemData[]>([]);\n  const [showModal, setShowModal] = useState(false);\n  const [editMode, setEditMode] = useState(false);\n  const [currentItem, setCurrentItem] = useState<ItemData | null>(null);\n  const [showCsvModal, setShowCsvModal] = useState(false);\n\n  // Fetch data dynamically when component mounts\n  useEffect(() => {\n    fetchItemsData();\n  }, []);\n\n  const fetchItemsData = async () => {\n    try {\n      const response = await ItemService.getItems();  // Using ItemService instead\n      const items = response.data || response;\n      const formattedItems = items.map((item: any) => ({\n        id: item.id,\n        name: item.name,\n        category: item.category,\n        iddsi_level: item.iddsi_level,\n      }));\n      setItemsData(formattedItems);\n    } catch (error) {\n      console.error('Error fetching items data:', error);\n    }\n  };\n\n  const handleCsvUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      Papa.parse(file, {\n        complete: async function (results: any) {\n          const data = results.data;\n          const parsedItems: ItemData[] = data.slice(1).map((row: any, index: number) => ({\n            id: itemsData.length + index + 1,\n            name: row[0],\n            category: row[1],\n            iddsi_level: row[2],\n          }));\n\n          for (const item of parsedItems) {\n            try {\n              await ItemService.setItems(item.name, item.category, item.iddsi_level);  // Use ItemService\n            } catch (error) {\n              console.error('Error uploading item:', item, error);\n            }\n          }\n\n          fetchItemsData();\n          alert(\"Items uploaded and saved successfully!\");\n        },\n        header: false,\n      });\n    }\n    setShowCsvModal(false);\n  };\n\n  // Other logic...\n};\nexport default Items; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}