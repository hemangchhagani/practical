{"ast":null,"code":"import axios from 'axios';\n\n//const API_URL = 'http://127.0.0.1:8000'; // Change to your API endpoint\nconst API_URL = process.env.REACT_APP_API_URL;\nconst AuthService = {\n  register: (username, email, password) => {\n    return axios.post(API_URL + '/register', {\n      username,\n      email,\n      password\n    });\n  },\n  login: (email, password) => {\n    return axios.post(API_URL + '/login', {\n      email,\n      password\n    }, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      if (response.data.token) {\n        localStorage.setItem('user', JSON.stringify(response.data));\n        return response.data; // Successful login\n      } else {\n        // If no token, login is unsuccessful (server didn't provide token)\n        throw new Error('Invalid login credentials.');\n      }\n    });\n  },\n  logout: () => {\n    localStorage.removeItem('user');\n  },\n  getCurrentUser: () => {\n    const userStr = localStorage.getItem('user');\n    if (userStr) return JSON.parse(userStr);\n    return null;\n  }\n};\nexport default AuthService;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","AuthService","register","username","email","password","post","login","headers","then","response","data","token","localStorage","setItem","JSON","stringify","Error","logout","removeItem","getCurrentUser","userStr","getItem","parse"],"sources":["D:/practical/src/services/AuthService.ts"],"sourcesContent":["import axios from 'axios';\n\n//const API_URL = 'http://127.0.0.1:8000'; // Change to your API endpoint\nconst API_URL = process.env.REACT_APP_API_URL;\n\nconst AuthService = {\n  register: (username: string, email: string, password: string) => {\n    return axios.post(API_URL + '/register', {\n      username,\n      email,\n      password\n    });\n  },\n\n  login: (email: string, password: string) => {\n    return axios\n      .post(\n        API_URL + '/login',\n        {\n          email,\n          password,\n        },\n        {\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        }\n      )\n      .then((response) => {\n        if (response.data.token) {\n          localStorage.setItem('user', JSON.stringify(response.data));\n          return response.data; // Successful login\n        } else {\n          // If no token, login is unsuccessful (server didn't provide token)\n          throw new Error('Invalid login credentials.');\n        }\n      });\n  },\n\n  logout: () => {\n    localStorage.removeItem('user');\n  },\n\n  getCurrentUser: () => {\n    const userStr = localStorage.getItem('user');\n    if (userStr) return JSON.parse(userStr);\n    return null;\n  },\n};\n\nexport default AuthService;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB;AAE7C,MAAMC,WAAW,GAAG;EAClBC,QAAQ,EAAEA,CAACC,QAAgB,EAAEC,KAAa,EAAEC,QAAgB,KAAK;IAC/D,OAAOT,KAAK,CAACU,IAAI,CAACT,OAAO,GAAG,WAAW,EAAE;MACvCM,QAAQ;MACRC,KAAK;MACLC;IACF,CAAC,CAAC;EACJ,CAAC;EAEDE,KAAK,EAAEA,CAACH,KAAa,EAAEC,QAAgB,KAAK;IAC1C,OAAOT,KAAK,CACTU,IAAI,CACHT,OAAO,GAAG,QAAQ,EAClB;MACEO,KAAK;MACLC;IACF,CAAC,EACD;MACEG,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CACF,CAAC,CACAC,IAAI,CAAEC,QAAQ,IAAK;MAClB,IAAIA,QAAQ,CAACC,IAAI,CAACC,KAAK,EAAE;QACvBC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACN,QAAQ,CAACC,IAAI,CAAC,CAAC;QAC3D,OAAOD,QAAQ,CAACC,IAAI,CAAC,CAAC;MACxB,CAAC,MAAM;QACL;QACA,MAAM,IAAIM,KAAK,CAAC,4BAA4B,CAAC;MAC/C;IACF,CAAC,CAAC;EACN,CAAC;EAEDC,MAAM,EAAEA,CAAA,KAAM;IACZL,YAAY,CAACM,UAAU,CAAC,MAAM,CAAC;EACjC,CAAC;EAEDC,cAAc,EAAEA,CAAA,KAAM;IACpB,MAAMC,OAAO,GAAGR,YAAY,CAACS,OAAO,CAAC,MAAM,CAAC;IAC5C,IAAID,OAAO,EAAE,OAAON,IAAI,CAACQ,KAAK,CAACF,OAAO,CAAC;IACvC,OAAO,IAAI;EACb;AACF,CAAC;AAED,eAAepB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}