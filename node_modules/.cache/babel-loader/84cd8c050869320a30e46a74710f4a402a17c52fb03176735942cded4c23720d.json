{"ast":null,"code":"import axios from 'axios';\n\n//const API_URL = 'http://127.0.0.1:8000'; // Change to your API endpoint\nconst API_URL = process.env.REACT_APP_API_URL;\nconst AuthService = {\n  register: (username, email, password) => {\n    return axios.post(API_URL + '/register', {\n      username,\n      email,\n      password\n    });\n  },\n  async login(email, password) {\n    try {\n      const response = await axios.post(API_URL + '/login', {\n        email,\n        password\n      });\n\n      // Check if response is successful and has a status code 200\n      if (response.status === 200 && response.data.status === 200) {\n        const token = response.data.data.token;\n        localStorage.setItem('token', token); // Store token in localStorage\n        return response.data; // Return the entire response for further use\n      } else {\n        throw new Error(response.data.message || 'Invalid login credentials');\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n      throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Error during login');\n    }\n  },\n  // return axios\n  //   .post(API_URL + '/login', { email, password })\n  //   .then((response) => {\n\n  //     if (response.data.token) {\n  //       localStorage.setItem('user', JSON.stringify(response.data));\n  //       return response.data;\n  //     } else {\n  //       throw new Error('Invalid login credentials.');\n  //     }\n  //   })\n  //   .catch((error) => {\n  //     console.error('Error during login:', error);\n  //     // Log the error response, if available\n  //     if (error.response) {\n  //       console.error('Response data:', error.response.data);\n  //       console.error('Response status:', error.response.status);\n  //       console.error('Response headers:', error.response.headers);\n  //     }\n  //     throw error; // Re-throw the error if necessary\n  //   });\n\n  //  },\n\n  logout: () => {\n    localStorage.removeItem('user');\n  },\n  getCurrentUser: () => {\n    const userStr = localStorage.getItem('user');\n    if (userStr) return JSON.parse(userStr);\n    return null;\n  },\n  // Add the checkAuth method\n  checkAuth() {\n    const user = this.getCurrentUser(); // Check if the user is stored locally\n    if (user && user.token) {\n      // You can also verify the token by sending a request to the backend if necessary\n      return Promise.resolve({\n        isAuthenticated: true\n      });\n    } else {\n      return Promise.resolve({\n        isAuthenticated: false\n      });\n    }\n  }\n};\nexport default AuthService;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","AuthService","register","username","email","password","post","login","response","status","data","token","localStorage","setItem","Error","message","error","_error$response","_error$response$data","logout","removeItem","getCurrentUser","userStr","getItem","JSON","parse","checkAuth","user","Promise","resolve","isAuthenticated"],"sources":["C:/Users/Hemang/Desktop/practical/src/services/AuthService.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\n//const API_URL = 'http://127.0.0.1:8000'; // Change to your API endpoint\r\nconst API_URL = process.env.REACT_APP_API_URL;\r\n\r\nconst AuthService = {\r\n  register: (username: string, email: string, password: string) => {\r\n    return axios.post(API_URL + '/register', {\r\n      username,\r\n      email,\r\n      password\r\n    });\r\n  },\r\n\r\n      async login(email: string, password: string) {\r\n    try {\r\n      const response = await axios.post(API_URL + '/login', { email, password });\r\n      \r\n      // Check if response is successful and has a status code 200\r\n      if (response.status === 200 && response.data.status === 200) {\r\n        const token = response.data.data.token;\r\n        localStorage.setItem('token', token); // Store token in localStorage\r\n        return response.data; // Return the entire response for further use\r\n      } else {\r\n        throw new Error(response.data.message || 'Invalid login credentials');\r\n      }\r\n    } catch (error: any) {\r\n      throw new Error(error.response?.data?.message || 'Error during login');\r\n    }\r\n  },\r\n\r\n      // return axios\r\n      //   .post(API_URL + '/login', { email, password })\r\n      //   .then((response) => {\r\n\r\n      //     if (response.data.token) {\r\n      //       localStorage.setItem('user', JSON.stringify(response.data));\r\n      //       return response.data;\r\n      //     } else {\r\n      //       throw new Error('Invalid login credentials.');\r\n      //     }\r\n      //   })\r\n      //   .catch((error) => {\r\n      //     console.error('Error during login:', error);\r\n      //     // Log the error response, if available\r\n      //     if (error.response) {\r\n      //       console.error('Response data:', error.response.data);\r\n      //       console.error('Response status:', error.response.status);\r\n      //       console.error('Response headers:', error.response.headers);\r\n      //     }\r\n      //     throw error; // Re-throw the error if necessary\r\n      //   });\r\n\r\n      //  },\r\n\r\n  \r\n  \r\n\r\n  logout: () => {\r\n    localStorage.removeItem('user');\r\n  },\r\n\r\n  getCurrentUser: () => {\r\n    const userStr = localStorage.getItem('user');\r\n    if (userStr) return JSON.parse(userStr);\r\n    return null;\r\n  },\r\n\r\n  // Add the checkAuth method\r\n  checkAuth() {\r\n    const user = this.getCurrentUser(); // Check if the user is stored locally\r\n    if (user && user.token) {\r\n      // You can also verify the token by sending a request to the backend if necessary\r\n      return Promise.resolve({ isAuthenticated: true });\r\n    } else {\r\n      return Promise.resolve({ isAuthenticated: false });\r\n    }\r\n  },\r\n};\r\n\r\nexport default AuthService;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB;AAE7C,MAAMC,WAAW,GAAG;EAClBC,QAAQ,EAAEA,CAACC,QAAgB,EAAEC,KAAa,EAAEC,QAAgB,KAAK;IAC/D,OAAOT,KAAK,CAACU,IAAI,CAACT,OAAO,GAAG,WAAW,EAAE;MACvCM,QAAQ;MACRC,KAAK;MACLC;IACF,CAAC,CAAC;EACJ,CAAC;EAEG,MAAME,KAAKA,CAACH,KAAa,EAAEC,QAAgB,EAAE;IAC/C,IAAI;MACF,MAAMG,QAAQ,GAAG,MAAMZ,KAAK,CAACU,IAAI,CAACT,OAAO,GAAG,QAAQ,EAAE;QAAEO,KAAK;QAAEC;MAAS,CAAC,CAAC;;MAE1E;MACA,IAAIG,QAAQ,CAACC,MAAM,KAAK,GAAG,IAAID,QAAQ,CAACE,IAAI,CAACD,MAAM,KAAK,GAAG,EAAE;QAC3D,MAAME,KAAK,GAAGH,QAAQ,CAACE,IAAI,CAACA,IAAI,CAACC,KAAK;QACtCC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,KAAK,CAAC,CAAC,CAAC;QACtC,OAAOH,QAAQ,CAACE,IAAI,CAAC,CAAC;MACxB,CAAC,MAAM;QACL,MAAM,IAAII,KAAK,CAACN,QAAQ,CAACE,IAAI,CAACK,OAAO,IAAI,2BAA2B,CAAC;MACvE;IACF,CAAC,CAAC,OAAOC,KAAU,EAAE;MAAA,IAAAC,eAAA,EAAAC,oBAAA;MACnB,MAAM,IAAIJ,KAAK,CAAC,EAAAG,eAAA,GAAAD,KAAK,CAACR,QAAQ,cAAAS,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBP,IAAI,cAAAQ,oBAAA,uBAApBA,oBAAA,CAAsBH,OAAO,KAAI,oBAAoB,CAAC;IACxE;EACF,CAAC;EAEG;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAKJI,MAAM,EAAEA,CAAA,KAAM;IACZP,YAAY,CAACQ,UAAU,CAAC,MAAM,CAAC;EACjC,CAAC;EAEDC,cAAc,EAAEA,CAAA,KAAM;IACpB,MAAMC,OAAO,GAAGV,YAAY,CAACW,OAAO,CAAC,MAAM,CAAC;IAC5C,IAAID,OAAO,EAAE,OAAOE,IAAI,CAACC,KAAK,CAACH,OAAO,CAAC;IACvC,OAAO,IAAI;EACb,CAAC;EAED;EACAI,SAASA,CAAA,EAAG;IACV,MAAMC,IAAI,GAAG,IAAI,CAACN,cAAc,CAAC,CAAC,CAAC,CAAC;IACpC,IAAIM,IAAI,IAAIA,IAAI,CAAChB,KAAK,EAAE;MACtB;MACA,OAAOiB,OAAO,CAACC,OAAO,CAAC;QAAEC,eAAe,EAAE;MAAK,CAAC,CAAC;IACnD,CAAC,MAAM;MACL,OAAOF,OAAO,CAACC,OAAO,CAAC;QAAEC,eAAe,EAAE;MAAM,CAAC,CAAC;IACpD;EACF;AACF,CAAC;AAED,eAAe7B,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}