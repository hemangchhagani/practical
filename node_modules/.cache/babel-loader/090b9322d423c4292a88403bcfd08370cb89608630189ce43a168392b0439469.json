{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://127.0.0.1:8000'; // Change to your API endpoint\n\nconst register = (name, email, password, password_confirmation) => {\n  return axios.post(API_URL + '/register', {\n    name,\n    email,\n    password\n  });\n};\nconst login = (email, password) => {\n  return axios.post(API_URL + '/login', {\n    email,\n    password\n  }, {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }).then(response => {\n    if (response.data.token) {\n      localStorage.setItem('user', JSON.stringify(response.data));\n      return response.data; // Successful login\n    } else {\n      // If no token, login is unsuccessful (server didn't provide token)\n      throw new Error('Invalid login credentials.');\n    }\n  });\n};\nconst logout = () => {\n  localStorage.removeItem('user');\n};\nconst getCurrentUser = () => {\n  const userStr = localStorage.getItem('user');\n  if (userStr) return JSON.parse(userStr);\n  return null;\n};\nexport default {\n  register,\n  login,\n  logout,\n  getCurrentUser\n};","map":{"version":3,"names":["axios","API_URL","register","name","email","password","password_confirmation","post","login","headers","then","response","data","token","localStorage","setItem","JSON","stringify","Error","logout","removeItem","getCurrentUser","userStr","getItem","parse"],"sources":["C:/Users/Dell/Desktop/precticaltest/frontend/src/components/AuthService.ts"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://127.0.0.1:8000'; // Change to your API endpoint\n\nconst register = (name: string, email: string, password: string ,password_confirmation: string) => {\n  return axios.post(API_URL + '/register', {\n    name,\n    email,\n    password\n  });\n};\n\nconst login = (email: string, password: string) => {\n  return axios.post(API_URL + '/login', {\n    email,\n    password\n  },{ headers: {\n    'Content-Type': 'application/json'\n}}).then(response => {\n  if (response.data.token) {\n    localStorage.setItem('user', JSON.stringify(response.data));\n    return response.data; // Successful login\n  } else {\n    // If no token, login is unsuccessful (server didn't provide token)\n    throw new Error('Invalid login credentials.');\n  }\n  });\n};\n\nconst logout = () => {\n  localStorage.removeItem('user');\n};\n\nconst getCurrentUser = () => {\n  const userStr = localStorage.getItem('user');\n  if (userStr) return JSON.parse(userStr);\n  return null;\n};\n\nexport default {\n  register,\n  login,\n  logout,\n  getCurrentUser\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,uBAAuB,CAAC,CAAC;;AAEzC,MAAMC,QAAQ,GAAGA,CAACC,IAAY,EAAEC,KAAa,EAAEC,QAAgB,EAAEC,qBAA6B,KAAK;EACjG,OAAON,KAAK,CAACO,IAAI,CAACN,OAAO,GAAG,WAAW,EAAE;IACvCE,IAAI;IACJC,KAAK;IACLC;EACF,CAAC,CAAC;AACJ,CAAC;AAED,MAAMG,KAAK,GAAGA,CAACJ,KAAa,EAAEC,QAAgB,KAAK;EACjD,OAAOL,KAAK,CAACO,IAAI,CAACN,OAAO,GAAG,QAAQ,EAAE;IACpCG,KAAK;IACLC;EACF,CAAC,EAAC;IAAEI,OAAO,EAAE;MACX,cAAc,EAAE;IACpB;EAAC,CAAC,CAAC,CAACC,IAAI,CAACC,QAAQ,IAAI;IACnB,IAAIA,QAAQ,CAACC,IAAI,CAACC,KAAK,EAAE;MACvBC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACN,QAAQ,CAACC,IAAI,CAAC,CAAC;MAC3D,OAAOD,QAAQ,CAACC,IAAI,CAAC,CAAC;IACxB,CAAC,MAAM;MACL;MACA,MAAM,IAAIM,KAAK,CAAC,4BAA4B,CAAC;IAC/C;EACA,CAAC,CAAC;AACJ,CAAC;AAED,MAAMC,MAAM,GAAGA,CAAA,KAAM;EACnBL,YAAY,CAACM,UAAU,CAAC,MAAM,CAAC;AACjC,CAAC;AAED,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAC3B,MAAMC,OAAO,GAAGR,YAAY,CAACS,OAAO,CAAC,MAAM,CAAC;EAC5C,IAAID,OAAO,EAAE,OAAON,IAAI,CAACQ,KAAK,CAACF,OAAO,CAAC;EACvC,OAAO,IAAI;AACb,CAAC;AAED,eAAe;EACbpB,QAAQ;EACRM,KAAK;EACLW,MAAM;EACNE;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}