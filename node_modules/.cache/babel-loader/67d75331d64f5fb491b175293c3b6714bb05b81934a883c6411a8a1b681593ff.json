{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://127.0.0.1:8000'; // Change to your API endpoint\n\nconst register = (name, email, password, password_confirmation) => {\n  return axios.post(API_URL + '/register', {\n    name,\n    email,\n    password,\n    password_confirmation\n  });\n};\nconst login = async (email, password) => {\n  try {\n    const response = await axios.post(API_URL + '/login', {\n      email,\n      password\n    }, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n\n    // Check if the response contains a token (successful login)\n    if (response.data.token) {\n      localStorage.setItem('user', JSON.stringify(response.data));\n      return response.data; // Successful login\n    } else {\n      // If no token, login is unsuccessful (server didn't provide token)\n      throw new Error('Invalid login credentials.');\n    }\n  } catch (error) {\n    // Handle error: login failed or server issue\n    console.error('Login failed:', error.response ? error.response.data : error.message);\n\n    // Optionally, you can throw the error further to be handled in the UI\n    throw error.response ? error.response.data : new Error('An error occurred.');\n  }\n};\nconst logout = () => {\n  localStorage.removeItem('user');\n};\nconst getCurrentUser = () => {\n  const userStr = localStorage.getItem('user');\n  if (userStr) return JSON.parse(userStr);\n  return null;\n};\nexport default {\n  register,\n  login,\n  logout,\n  getCurrentUser\n};","map":{"version":3,"names":["axios","API_URL","register","name","email","password","password_confirmation","post","login","response","headers","data","token","localStorage","setItem","JSON","stringify","Error","error","console","message","logout","removeItem","getCurrentUser","userStr","getItem","parse"],"sources":["C:/Users/Dell/Desktop/precticaltest/frontend/src/components/AuthService.ts"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://127.0.0.1:8000'; // Change to your API endpoint\n\nconst register = (name: string, email: string, password: string ,password_confirmation: string) => {\n  return axios.post(API_URL + '/register', {\n    name,\n    email,\n    password,\n    password_confirmation,\n  });\n};\nconst login = async (email: string, password: string) => {\n  try {\n    const response = await axios.post(\n      API_URL + '/login',\n      { email, password },\n      {\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      }\n    );\n\n    // Check if the response contains a token (successful login)\n    if (response.data.token) {\n      localStorage.setItem('user', JSON.stringify(response.data));\n      return response.data; // Successful login\n    } else {\n      // If no token, login is unsuccessful (server didn't provide token)\n      throw new Error('Invalid login credentials.');\n    }\n  } catch (error) {\n    // Handle error: login failed or server issue\n    console.error('Login failed:', error.response ? error.response.data : error.message);\n\n    // Optionally, you can throw the error further to be handled in the UI\n    throw error.response ? error.response.data : new Error('An error occurred.');\n  }\n};\nconst logout = () => {\n  localStorage.removeItem('user');\n};\n\nconst getCurrentUser = () => {\n  const userStr = localStorage.getItem('user');\n  if (userStr) return JSON.parse(userStr);\n  return null;\n};\n\nexport default {\n  register,\n  login,\n  logout,\n  getCurrentUser\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,uBAAuB,CAAC,CAAC;;AAEzC,MAAMC,QAAQ,GAAGA,CAACC,IAAY,EAAEC,KAAa,EAAEC,QAAgB,EAAEC,qBAA6B,KAAK;EACjG,OAAON,KAAK,CAACO,IAAI,CAACN,OAAO,GAAG,WAAW,EAAE;IACvCE,IAAI;IACJC,KAAK;IACLC,QAAQ;IACRC;EACF,CAAC,CAAC;AACJ,CAAC;AACD,MAAME,KAAK,GAAG,MAAAA,CAAOJ,KAAa,EAAEC,QAAgB,KAAK;EACvD,IAAI;IACF,MAAMI,QAAQ,GAAG,MAAMT,KAAK,CAACO,IAAI,CAC/BN,OAAO,GAAG,QAAQ,EAClB;MAAEG,KAAK;MAAEC;IAAS,CAAC,EACnB;MACEK,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CACF,CAAC;;IAED;IACA,IAAID,QAAQ,CAACE,IAAI,CAACC,KAAK,EAAE;MACvBC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACP,QAAQ,CAACE,IAAI,CAAC,CAAC;MAC3D,OAAOF,QAAQ,CAACE,IAAI,CAAC,CAAC;IACxB,CAAC,MAAM;MACL;MACA,MAAM,IAAIM,KAAK,CAAC,4BAA4B,CAAC;IAC/C;EACF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd;IACAC,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEA,KAAK,CAACT,QAAQ,GAAGS,KAAK,CAACT,QAAQ,CAACE,IAAI,GAAGO,KAAK,CAACE,OAAO,CAAC;;IAEpF;IACA,MAAMF,KAAK,CAACT,QAAQ,GAAGS,KAAK,CAACT,QAAQ,CAACE,IAAI,GAAG,IAAIM,KAAK,CAAC,oBAAoB,CAAC;EAC9E;AACF,CAAC;AACD,MAAMI,MAAM,GAAGA,CAAA,KAAM;EACnBR,YAAY,CAACS,UAAU,CAAC,MAAM,CAAC;AACjC,CAAC;AAED,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAC3B,MAAMC,OAAO,GAAGX,YAAY,CAACY,OAAO,CAAC,MAAM,CAAC;EAC5C,IAAID,OAAO,EAAE,OAAOT,IAAI,CAACW,KAAK,CAACF,OAAO,CAAC;EACvC,OAAO,IAAI;AACb,CAAC;AAED,eAAe;EACbtB,QAAQ;EACRM,KAAK;EACLa,MAAM;EACNE;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}