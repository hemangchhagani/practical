{"ast":null,"code":"import axios from 'axios';\n\n//const API_URL = 'http://127.0.0.1:8000'; // Change to your API endpoint\nconst API_URL = process.env.REACT_APP_API_URL;\nconst AuthService = {\n  register: (username, email, password) => {\n    return axios.post(API_URL + '/register', {\n      username,\n      email,\n      password\n    });\n  },\n  login: (email, password) => {\n    return axios.post(API_URL + '/login', {\n      email,\n      password\n    }).then(response => {\n      if (response.data.token) {\n        localStorage.setItem('user', JSON.stringify(response.data));\n        return response.data;\n      } else {\n        throw new Error('Invalid login credentials.');\n      }\n    }).catch(error => {\n      console.error('Error during login:', error);\n      // Log the error response, if available\n      if (error.response) {\n        console.error('Response data:', error.response.data);\n        console.error('Response status:', error.response.status);\n        console.error('Response headers:', error.response.headers);\n      }\n      throw error; // Re-throw the error if necessary\n    });\n  },\n  logout: () => {\n    localStorage.removeItem('user');\n  },\n  getCurrentUser: () => {\n    const userStr = localStorage.getItem('user');\n    if (userStr) return JSON.parse(userStr);\n    return null;\n  },\n  // Add the checkAuth method\n  checkAuth() {\n    const user = this.getCurrentUser(); // Check if the user is stored locally\n    if (user && user.token) {\n      // You can also verify the token by sending a request to the backend if necessary\n      return Promise.resolve({\n        isAuthenticated: true\n      });\n    } else {\n      return Promise.resolve({\n        isAuthenticated: false\n      });\n    }\n  }\n};\nexport default AuthService;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","AuthService","register","username","email","password","post","login","then","response","data","token","localStorage","setItem","JSON","stringify","Error","catch","error","console","status","headers","logout","removeItem","getCurrentUser","userStr","getItem","parse","checkAuth","user","Promise","resolve","isAuthenticated"],"sources":["C:/Users/Hemang/Desktop/practical/src/services/AuthService.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\n//const API_URL = 'http://127.0.0.1:8000'; // Change to your API endpoint\r\nconst API_URL = process.env.REACT_APP_API_URL;\r\n\r\nconst AuthService = {\r\n  register: (username: string, email: string, password: string) => {\r\n    return axios.post(API_URL + '/register', {\r\n      username,\r\n      email,\r\n      password\r\n    });\r\n  },\r\n\r\n    login: (email: string, password: string) => {\r\n      return axios\r\n        .post(API_URL + '/login', { email, password })\r\n        .then((response) => {\r\n\r\n          if (response.data.token) {\r\n            localStorage.setItem('user', JSON.stringify(response.data));\r\n            return response.data;\r\n          } else {\r\n            throw new Error('Invalid login credentials.');\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.error('Error during login:', error);\r\n          // Log the error response, if available\r\n          if (error.response) {\r\n            console.error('Response data:', error.response.data);\r\n            console.error('Response status:', error.response.status);\r\n            console.error('Response headers:', error.response.headers);\r\n          }\r\n          throw error; // Re-throw the error if necessary\r\n        });\r\n    },\r\n\r\n  \r\n  \r\n\r\n  logout: () => {\r\n    localStorage.removeItem('user');\r\n  },\r\n\r\n  getCurrentUser: () => {\r\n    const userStr = localStorage.getItem('user');\r\n    if (userStr) return JSON.parse(userStr);\r\n    return null;\r\n  },\r\n\r\n  // Add the checkAuth method\r\n  checkAuth() {\r\n    const user = this.getCurrentUser(); // Check if the user is stored locally\r\n    if (user && user.token) {\r\n      // You can also verify the token by sending a request to the backend if necessary\r\n      return Promise.resolve({ isAuthenticated: true });\r\n    } else {\r\n      return Promise.resolve({ isAuthenticated: false });\r\n    }\r\n  },\r\n};\r\n\r\nexport default AuthService;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB;AAE7C,MAAMC,WAAW,GAAG;EAClBC,QAAQ,EAAEA,CAACC,QAAgB,EAAEC,KAAa,EAAEC,QAAgB,KAAK;IAC/D,OAAOT,KAAK,CAACU,IAAI,CAACT,OAAO,GAAG,WAAW,EAAE;MACvCM,QAAQ;MACRC,KAAK;MACLC;IACF,CAAC,CAAC;EACJ,CAAC;EAECE,KAAK,EAAEA,CAACH,KAAa,EAAEC,QAAgB,KAAK;IAC1C,OAAOT,KAAK,CACTU,IAAI,CAACT,OAAO,GAAG,QAAQ,EAAE;MAAEO,KAAK;MAAEC;IAAS,CAAC,CAAC,CAC7CG,IAAI,CAAEC,QAAQ,IAAK;MAElB,IAAIA,QAAQ,CAACC,IAAI,CAACC,KAAK,EAAE;QACvBC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACN,QAAQ,CAACC,IAAI,CAAC,CAAC;QAC3D,OAAOD,QAAQ,CAACC,IAAI;MACtB,CAAC,MAAM;QACL,MAAM,IAAIM,KAAK,CAAC,4BAA4B,CAAC;MAC/C;IACF,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAK;MAChBC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C;MACA,IAAIA,KAAK,CAACT,QAAQ,EAAE;QAClBU,OAAO,CAACD,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAACT,QAAQ,CAACC,IAAI,CAAC;QACpDS,OAAO,CAACD,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAACT,QAAQ,CAACW,MAAM,CAAC;QACxDD,OAAO,CAACD,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAACT,QAAQ,CAACY,OAAO,CAAC;MAC5D;MACA,MAAMH,KAAK,CAAC,CAAC;IACf,CAAC,CAAC;EACN,CAAC;EAKHI,MAAM,EAAEA,CAAA,KAAM;IACZV,YAAY,CAACW,UAAU,CAAC,MAAM,CAAC;EACjC,CAAC;EAEDC,cAAc,EAAEA,CAAA,KAAM;IACpB,MAAMC,OAAO,GAAGb,YAAY,CAACc,OAAO,CAAC,MAAM,CAAC;IAC5C,IAAID,OAAO,EAAE,OAAOX,IAAI,CAACa,KAAK,CAACF,OAAO,CAAC;IACvC,OAAO,IAAI;EACb,CAAC;EAED;EACAG,SAASA,CAAA,EAAG;IACV,MAAMC,IAAI,GAAG,IAAI,CAACL,cAAc,CAAC,CAAC,CAAC,CAAC;IACpC,IAAIK,IAAI,IAAIA,IAAI,CAAClB,KAAK,EAAE;MACtB;MACA,OAAOmB,OAAO,CAACC,OAAO,CAAC;QAAEC,eAAe,EAAE;MAAK,CAAC,CAAC;IACnD,CAAC,MAAM;MACL,OAAOF,OAAO,CAACC,OAAO,CAAC;QAAEC,eAAe,EAAE;MAAM,CAAC,CAAC;IACpD;EACF;AACF,CAAC;AAED,eAAe/B,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}